AWSTemplateFormatVersion: '2010-09-09'
Description: Stack 1 - IAM Roles, Lambda Functions, and SNS for EC2 Data Transfer Automation

Parameters:
  TeamName:
    Type: String
    AllowedValues:
      - enzen
      - sgn
      - cgi
    Description: Team name used for dynamic naming and tagging.

Resources:

  SGNGuardDutyEC2StagingProtectionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SGN-GuardDuty-EC2Staging-ProtectionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: guardduty.amazonaws.com
            Action: sts:AssumeRole

      Policies:
        - PolicyName: SGN-GuardDuty-EC2Staging-InlinePolicy
          PolicyDocument: {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Condition": {
                              "StringLike": {
                                  "events:ManagedBy": "malware-protection-plan.guardduty.amazonaws.com"
                              }
                          },
                          "Action": [
                              "events:PutRule",
                              "events:DeleteRule",
                              "events:PutTargets",
                              "events:RemoveTargets"
                          ],
                          "Resource": "arn:aws:events:us-east-1:869935110941:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*",
                          "Effect": "Allow",
                          "Sid": "AllowManagedRuleToSendS3EventsToGuardDuty"
                      },
                      {
                          "Action": [
                              "events:DescribeRule",
                              "events:ListTargetsByRule"
                          ],
                          "Resource": "arn:aws:events:us-east-1:869935110941:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*",
                          "Effect": "Allow",
                          "Sid": "AllowGuardDutyToMonitorEventBridgeManagedRule"
                      },
                      {
                          "Action": [
                              "s3:PutObjectTagging",
                              "s3:GetObjectTagging",
                              "s3:PutObjectVersionTagging",
                              "s3:GetObjectVersionTagging"
                          ],
                          "Resource": "arn:aws:s3:::sgn-0ps-ec2staging/*",
                          "Effect": "Allow",
                          "Sid": "AllowPostScanTag"
                      },
                      {
                          "Action": [
                              "s3:PutBucketNotification",
                              "s3:GetBucketNotification"
                          ],
                          "Resource": "arn:aws:s3:::sgn-0ps-ec2staging",
                          "Effect": "Allow",
                          "Sid": "AllowEnableS3EventBridgeEvents"
                      },
                      {
                          "Action": [
                              "s3:PutObject"
                          ],
                          "Resource": "arn:aws:s3:::sgn-0ps-ec2staging/malware-protection-resource-validation-object",
                          "Effect": "Allow",
                          "Sid": "AllowPutValidationObject"
                      },
                      {
                          "Action": [
                              "s3:GetObject",
                              "s3:GetObjectVersion"
                          ],
                          "Resource": "arn:aws:s3:::sgn-0ps-ec2staging/*",
                          "Effect": "Allow",
                          "Sid": "AllowMalwareScan"
                      },
                      {
                          "Condition": {
                              "StringLike": {
                                  "kms:ViaService": "s3.*.amazonaws.com"
                              }
                          },
                          "Action": [
                              "kms:GenerateDataKey",
                              "kms:Decrypt"
                          ],
                          "Resource": "arn:aws:kms:us-east-1:869935110941:key/3f12d014-4db6-4f33-89a8-4e1695dc9ab5",
                          "Effect": "Allow",
                          "Sid": "AllowDecryptForMalwareScan"
                      }
                  ]
              }

  SGNOPSAutomationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SGN-OPS-EC2DataTransfer-AutomationRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole

      Policies:
        - PolicyName: SGN-GuardDuty-EC2Staging-InlinePolicy
          PolicyDocument: {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Condition": {
                              "StringLike": {
                                  "events:ManagedBy": "malware-protection-plan.guardduty.amazonaws.com"
                              }
                          },
                          "Action": [
                              "events:PutRule",
                              "events:DeleteRule",
                              "events:PutTargets",
                              "events:RemoveTargets"
                          ],
                          "Resource": "arn:aws:events:us-east-1:869935110941:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*",
                          "Effect": "Allow",
                          "Sid": "AllowManagedRuleToSendS3EventsToGuardDuty"
                      },
                      {
                          "Action": [
                              "events:DescribeRule",
                              "events:ListTargetsByRule"
                          ],
                          "Resource": "arn:aws:events:us-east-1:869935110941:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*",
                          "Effect": "Allow",
                          "Sid": "AllowGuardDutyToMonitorEventBridgeManagedRule"
                      },
                      {
                          "Action": [
                              "s3:PutObjectTagging",
                              "s3:GetObjectTagging",
                              "s3:PutObjectVersionTagging",
                              "s3:GetObjectVersionTagging"
                          ],
                          "Resource": "arn:aws:s3:::sgn-0ps-ec2staging/*",
                          "Effect": "Allow",
                          "Sid": "AllowPostScanTag"
                      },
                      {
                          "Action": [
                              "s3:PutBucketNotification",
                              "s3:GetBucketNotification"
                          ],
                          "Resource": "arn:aws:s3:::sgn-0ps-ec2staging",
                          "Effect": "Allow",
                          "Sid": "AllowEnableS3EventBridgeEvents"
                      },
                      {
                          "Action": [
                              "s3:PutObject"
                          ],
                          "Resource": "arn:aws:s3:::sgn-0ps-ec2staging/malware-protection-resource-validation-object",
                          "Effect": "Allow",
                          "Sid": "AllowPutValidationObject"
                      },
                      {
                          "Action": [
                              "s3:GetObject",
                              "s3:GetObjectVersion"
                          ],
                          "Resource": "arn:aws:s3:::sgn-0ps-ec2staging/*",
                          "Effect": "Allow",
                          "Sid": "AllowMalwareScan"
                      },
                      {
                          "Condition": {
                              "StringLike": {
                                  "kms:ViaService": "s3.*.amazonaws.com"
                              }
                          },
                          "Action": [
                              "kms:GenerateDataKey",
                              "kms:Decrypt"
                          ],
                          "Resource": "arn:aws:kms:us-east-1:869935110941:key/3f12d014-4db6-4f33-89a8-4e1695dc9ab5",
                          "Effect": "Allow",
                          "Sid": "AllowDecryptForMalwareScan"
                      }
                  ]
              }
      Policies:
        - PolicyName: SGN-OPS-EC2DataTransfer-InlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ec2:DescribeInstances
                Resource: "*"
              - Effect: Allow
                Action:
                  - ssm:DescribeInstanceInformation
                  - ssm:SendCommand
                  - ssm:ListCommands
                  - ssm:GetCommandInvocation
                  - ssm:ListCommandInvocations
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: !Sub "arn:aws:s3:::${TeamName}-0ps-ec2staging/Reports/*"
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt SSMNotificationFunction.Arn
                  - !GetAtt S3FolderStructureCreator.Arn

  SSMNotificationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SGN-OPS-EC2DataTransfer-LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

      Policies:
        - PolicyName: SGN-GuardDuty-EC2Staging-InlinePolicy
          PolicyDocument: {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Condition": {
                              "StringLike": {
                                  "events:ManagedBy": "malware-protection-plan.guardduty.amazonaws.com"
                              }
                          },
                          "Action": [
                              "events:PutRule",
                              "events:DeleteRule",
                              "events:PutTargets",
                              "events:RemoveTargets"
                          ],
                          "Resource": "arn:aws:events:us-east-1:869935110941:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*",
                          "Effect": "Allow",
                          "Sid": "AllowManagedRuleToSendS3EventsToGuardDuty"
                      },
                      {
                          "Action": [
                              "events:DescribeRule",
                              "events:ListTargetsByRule"
                          ],
                          "Resource": "arn:aws:events:us-east-1:869935110941:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*",
                          "Effect": "Allow",
                          "Sid": "AllowGuardDutyToMonitorEventBridgeManagedRule"
                      },
                      {
                          "Action": [
                              "s3:PutObjectTagging",
                              "s3:GetObjectTagging",
                              "s3:PutObjectVersionTagging",
                              "s3:GetObjectVersionTagging"
                          ],
                          "Resource": "arn:aws:s3:::sgn-0ps-ec2staging/*",
                          "Effect": "Allow",
                          "Sid": "AllowPostScanTag"
                      },
                      {
                          "Action": [
                              "s3:PutBucketNotification",
                              "s3:GetBucketNotification"
                          ],
                          "Resource": "arn:aws:s3:::sgn-0ps-ec2staging",
                          "Effect": "Allow",
                          "Sid": "AllowEnableS3EventBridgeEvents"
                      },
                      {
                          "Action": [
                              "s3:PutObject"
                          ],
                          "Resource": "arn:aws:s3:::sgn-0ps-ec2staging/malware-protection-resource-validation-object",
                          "Effect": "Allow",
                          "Sid": "AllowPutValidationObject"
                      },
                      {
                          "Action": [
                              "s3:GetObject",
                              "s3:GetObjectVersion"
                          ],
                          "Resource": "arn:aws:s3:::sgn-0ps-ec2staging/*",
                          "Effect": "Allow",
                          "Sid": "AllowMalwareScan"
                      },
                      {
                          "Condition": {
                              "StringLike": {
                                  "kms:ViaService": "s3.*.amazonaws.com"
                              }
                          },
                          "Action": [
                              "kms:GenerateDataKey",
                              "kms:Decrypt"
                          ],
                          "Resource": "arn:aws:kms:us-east-1:869935110941:key/3f12d014-4db6-4f33-89a8-4e1695dc9ab5",
                          "Effect": "Allow",
                          "Sid": "AllowDecryptForMalwareScan"
                      }
                  ]
              }
      Policies:
        - PolicyName: SSMNotificationLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref EC2DataTransferSNSTopic
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub "arn:aws:s3:::${TeamName}-0ps-ec2staging/*"

  SSMNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SSMNotification
      Handler: index.lambda_handler
      Runtime: python3.12
      Role: !GetAtt SSMNotificationLambdaExecutionRole.Arn
      Environment:
        Variables:
          SSM_NOTIFICATION_TOPIC_ARN: !Ref EC2DataTransferSNSTopic
      Code:
        ZipFile: |
          import boto3, os
          def lambda_handler(event, context):
              sns = boto3.client("sns")
              topic_arn = os.environ.get("SSM_NOTIFICATION_TOPIC_ARN")

              response = sns.publish(
                  TopicArn=topic_arn,
                  Subject="SSM Automation Execution Started",
                  Message=f"Execution ID: {event.get('ExecutionId')}\nTeam: {event.get('Team')}\nDirection: {event.get('Direction')}"
              )
              return {"SNSResponse": response}
  S3FolderStructureCreator:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: S3FolderStructureCreator
      Handler: index.lambda_handler
      Runtime: python3.12
      Role: !GetAtt SSMNotificationLambdaExecutionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import boto3, json, urllib3
          http = urllib3.PoolManager()

          def send(event, context, status, data):
              responseUrl = event['ResponseURL']
              body = json.dumps({
                  'Status': status,
                  'Reason': 'See details in CloudWatch',
                  'PhysicalResourceId': context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'NoEcho': False,
                  'Data': data
              })
              http.request('PUT', responseUrl, body=body, headers={'content-type': '', 'content-length': str(len(body))})

          def lambda_handler(event, context):
              s3 = boto3.client('s3')
              bucket = event['ResourceProperties']['BucketName']
              prefixes = [
                  "Inbound/sgn/", "Inbound/enzen/", "Inbound/cgi/",
                  "Outbound/sgn/", "Outbound/enzen/", "Outbound/cgi/",
                  "Reports/sgn/", "Reports/enzen/", "Reports/cgi/"
              ]
              try:
                  for prefix in prefixes:
                      s3.put_object(Bucket=bucket, Key=prefix)
                  send(event, context, "SUCCESS", {})
              except Exception as e:
                  send(event, context, "FAILED", {"Message": str(e)})

  EC2DataTransferSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: EC2DataTransferApproval

  EC2DataTransferEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref EC2DataTransferSNSTopic
      Protocol: email
      Endpoint: darren.oflaherty@cgi.com

Outputs:
  GuardDutyRole:
    Description: IAM role for GuardDuty EC2 Staging Protection
    Value: !Ref SGNGuardDutyEC2StagingProtectionRole
  AutomationRole:
    Description: IAM role for EC2 Data Transfer automation
    Value: !Ref SGNOPSAutomationRole
  SNSTopic:
    Description: SNS Topic for notifications
    Value: !Ref EC2DataTransferSNSTopic
  FolderStructureFunctionArn:
    Description: ARN for folder creation Lambda (export this for stack 2)
    Value: !GetAtt S3FolderStructureCreator.Arn
    Export:
      Name: FolderStructureFunctionArn